/* --------------------
  Case Study Schema
--------------------*/
   
USE [PortfolioProject]
GO

/****** Object:  Schema [pizza_runner]    Script Date: 2023-01-24 9:36:25 AM ******/
DROP SCHEMA [pizza_runner]
GO

/****** Object:  Schema [pizza_runner]    Script Date: 2023-01-24 9:36:25 AM ******/
CREATE SCHEMA [pizza_runner]
GO


SET search_path = pizza_runner
GO

DROP TABLE IF EXISTS runners;
CREATE TABLE runners (
  "runner_id" INTEGER,
  "registration_date" DATE
);
INSERT INTO runners
  ("runner_id", "registration_date")
VALUES
  (1, '2021-01-01'),
  (2, '2021-01-03'),
  (3, '2021-01-08'),
  (4, '2021-01-15');
GO

DROP TABLE IF EXISTS customer_orders;
CREATE TABLE customer_orders (
  "order_id" INTEGER,
  "customer_id" INTEGER,
  "pizza_id" INTEGER,
  "exclusions" VARCHAR(4),
  "extras" VARCHAR(4),
  "order_time" DATETIME
);
GO

INSERT INTO customer_orders
  ("order_id", "customer_id", "pizza_id", "exclusions", "extras", "order_time")
VALUES
  ('1', '101', '1', '', '', '2020-01-01 18:05:02'),
  ('2', '101', '1', '', '', '2020-01-01 19:00:52'),
  ('3', '102', '1', '', '', '2020-01-02 23:51:23'),
  ('3', '102', '2', '', NULL, '2020-01-02 23:51:23'),
  ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
  ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
  ('4', '103', '2', '4', '', '2020-01-04 13:23:46'),
  ('5', '104', '1', 'null', '1', '2020-01-08 21:00:29'),
  ('6', '101', '2', 'null', 'null', '2020-01-08 21:03:13'),
  ('7', '105', '2', 'null', '1', '2020-01-08 21:20:29'),
  ('8', '102', '1', 'null', 'null', '2020-01-09 23:54:33'),
  ('9', '103', '1', '4', '1, 5', '2020-01-10 11:22:59'),
  ('10', '104', '1', 'null', 'null', '2020-01-11 18:34:49'),
  ('10', '104', '1', '2, 6', '1, 4', '2020-01-11 18:34:49');
GO

DROP TABLE IF EXISTS runner_orders;
CREATE TABLE runner_orders (
  "order_id" INTEGER,
  "runner_id" INTEGER,
  "pickup_time" VARCHAR(19),
  "distance" VARCHAR(7),
  "duration" VARCHAR(10),
  "cancellation" VARCHAR(23)
);
GO

INSERT INTO runner_orders
  ("order_id", "runner_id", "pickup_time", "distance", "duration", "cancellation")
VALUES
  ('1', '1', '2020-01-01 18:15:34', '20km', '32 minutes', ''),
  ('2', '1', '2020-01-01 19:10:54', '20km', '27 minutes', ''),
  ('3', '1', '2020-01-03 00:12:37', '13.4km', '20 mins', NULL),
  ('4', '2', '2020-01-04 13:53:03', '23.4', '40', NULL),
  ('5', '3', '2020-01-08 21:10:57', '10', '15', NULL),
  ('6', '3', 'null', 'null', 'null', 'Restaurant Cancellation'),
  ('7', '2', '2020-01-08 21:30:45', '25km', '25mins', 'null'),
  ('8', '2', '2020-01-10 00:15:02', '23.4 km', '15 minute', 'null'),
  ('9', '2', 'null', 'null', 'null', 'Customer Cancellation'),
  ('10', '1', '2020-01-11 18:50:20', '10km', '10minutes', 'null');
GO

DROP TABLE IF EXISTS pizza_names;
GO

CREATE TABLE pizza_names (
  "pizza_id" INTEGER,
  "pizza_name" TEXT
);
INSERT INTO pizza_names
  ("pizza_id", "pizza_name")
VALUES
  (1, 'Meatlovers'),
  (2, 'Vegetarian');
GO

DROP TABLE IF EXISTS pizza_recipes;
CREATE TABLE pizza_recipes (
  "pizza_id" INTEGER,
  "toppings" TEXT
);
INSERT INTO pizza_recipes
  ("pizza_id", "toppings")
VALUES
  (1, '1, 2, 3, 4, 5, 6, 8, 10'),
  (2, '4, 6, 7, 9, 11, 12');
GO

DROP TABLE IF EXISTS pizza_toppings;
CREATE TABLE pizza_toppings (
  "topping_id" INTEGER,
  "topping_name" TEXT
);
INSERT INTO pizza_toppings
  ("topping_id", "topping_name")
VALUES
  (1, 'Bacon'),
  (2, 'BBQ Sauce'),
  (3, 'Beef'),
  (4, 'Cheese'),
  (5, 'Chicken'),
  (6, 'Mushrooms'),
  (7, 'Onions'),
  (8, 'Pepperoni'),
  (9, 'Peppers'),
  (10, 'Salami'),
  (11, 'Tomatoes'),
  (12, 'Tomato Sauce');
  
/* --------------------
 Case Study Questions
--------------------*/
   
-- Table Cleaning

SELECT order_id, customer_id, pizza_id, 
  CASE 
    WHEN exclusions IS null OR exclusions LIKE 'null' THEN ' '
    ELSE exclusions
    END AS exclusions,
  CASE 
    WHEN extras IS NULL or extras LIKE 'null' THEN ' '
    ELSE extras 
    END AS extras, 
  order_time
INTO #customer_orders -- create TEMP TABLE
FROM customer_orders

SELECT order_id, runner_id,
  CASE 
    WHEN pickup_time LIKE 'null' THEN ' '
    ELSE pickup_time 
    END AS pickup_time,
  CASE 
    WHEN distance LIKE 'null' THEN ' '
    WHEN distance LIKE '%km' THEN TRIM('km' from distance) 
    ELSE distance END AS distance,
  CASE 
    WHEN duration LIKE 'null' THEN ' ' 
    WHEN duration LIKE '%mins' THEN TRIM('mins' from duration) 
    WHEN duration LIKE '%minute' THEN TRIM('minute' from duration)        
    WHEN duration LIKE '%minutes' THEN TRIM('minutes' from duration)       
    ELSE duration END AS duration,
  CASE 
    WHEN cancellation IS NULL or cancellation LIKE 'null' THEN ''
    ELSE cancellation END AS cancellation
INTO #runner_orders
FROM runner_orders

-- How many pizzas were ordered?
SELECT COUNT(order_id)
FROM dbo.#customer_orders

-- How many unique customer orders were made?
SELECT COUNT(DISTINCT order_id)
FROM dbo.#customer_orders

-- How many successful orders were delivered by each runner?
SELECT COUNT(pickup_time)
FROM dbo.#runner_orders


-- How many of each type of pizza was delivered?
SELECT pizza_id, COUNT(pizza_id) total_ordered
FROM dbo.#customer_orders c
JOIN dbo.#runner_orders r ON c.order_id = r.order_id
GROUP BY pizza_id

-- How many Vegetarian and Meatlovers were ordered by each customer?
SELECT c.customer_id, p.pizza_id, COUNT(p.pizza_id) total_pizzas
FROM dbo.#customer_orders c
JOIN dbo.pizza_names p ON c.pizza_id = p.pizza_id
GROUP BY c.customer_id, p.pizza_id

-- What was the maximum number of pizzas delivered in a single order?
SELECT TOP 1 c.order_id, COUNT(c.order_id) as pizzas_ordered
FROM dbo.#customer_orders c
JOIN dbo.#runner_orders r ON c.order_id = r.order_id
GROUP BY c.order_id
ORDER BY pizzas_ordered Desc

-- For each customer, how many delivered pizzas had at least 1 change and how many had no changes?
WITH delivered_orders_cte AS
(
SELECT c.customer_id, c.order_id, c.exclusions, c.extras, r.pickup_time, r.cancellation,
CASE 
WHEN r.pickup_time <> '' AND (exclusions <> '' OR extras <> '') THEN 'changed'
ELSE 'unchanged'
END AS pizza_changes
FROM #customer_orders c
JOIN #runner_orders r ON c.order_id = r.order_id
WHERE r.cancellation = ''
)

SELECT customer_id, 
SUM(CASE WHEN pizza_changes = 'changed' THEN 1 ELSE 0 END) total_changed,
SUM(CASE WHEN pizza_changes = 'unchanged' THEN 1 ELSE 0 END) total_unchanged
FROM delivered_orders_cte
GROUP BY customer_id


-- How many pizzas were delivered that had both exclusions and extras?
WITH delivered_orders_cte AS
(
SELECT c.customer_id, c.order_id, c.exclusions, c.extras, r.pickup_time, r.cancellation,
CASE 
WHEN r.pickup_time <> '' AND (exclusions <> '' AND extras <> '') THEN 'both_changes'
ELSE 'one_change'
END AS pizza_changes
FROM #customer_orders c
JOIN #runner_orders r ON c.order_id = r.order_id
WHERE r.cancellation = ''
)

SELECT customer_id, 
SUM(CASE WHEN pizza_changes = 'both_changes' THEN 1 ELSE 0 END) both_changes
FROM delivered_orders_cte
GROUP BY customer_id

-- What was the total volume of pizzas ordered for each hour of the day?
WITH hours_cte AS
(
SELECT DATEPART(HOUR, order_time) AS hours_ordered
FROM dbo.#customer_orders 
)

SELECT hours_ordered, COUNT(hours_ordered) AS total_ordered
FROM hours_cte
GROUP BY hours_ordered
ORDER BY hours_ordered ASC

-- What was the volume of orders for each day of the week?
SELECT FORMAT(DATEADD(DAY, 2, order_time),'dddd') AS day_of_week, 
 COUNT(order_id) AS total_pizzas_ordered
FROM #customer_orders
GROUP BY FORMAT(DATEADD(DAY, 2, order_time),'dddd')
